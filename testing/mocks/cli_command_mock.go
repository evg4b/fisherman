package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i fisherman/internal.CliCommand -o ./testing/mocks/cli_command_mock.go -n CliCommandMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CliCommandMock implements internal.CliCommand
type CliCommandMock struct {
	t minimock.Tester

	funcDescription          func() (s1 string)
	inspectFuncDescription   func()
	afterDescriptionCounter  uint64
	beforeDescriptionCounter uint64
	DescriptionMock          mCliCommandMockDescription

	funcName          func() (s1 string)
	inspectFuncName   func()
	afterNameCounter  uint64
	beforeNameCounter uint64
	NameMock          mCliCommandMockName

	funcRun          func(ctx context.Context, args []string) (err error)
	inspectFuncRun   func(ctx context.Context, args []string)
	afterRunCounter  uint64
	beforeRunCounter uint64
	RunMock          mCliCommandMockRun
}

// NewCliCommandMock returns a mock for internal.CliCommand
func NewCliCommandMock(t minimock.Tester) *CliCommandMock {
	m := &CliCommandMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DescriptionMock = mCliCommandMockDescription{mock: m}

	m.NameMock = mCliCommandMockName{mock: m}

	m.RunMock = mCliCommandMockRun{mock: m}
	m.RunMock.callArgs = []*CliCommandMockRunParams{}

	return m
}

type mCliCommandMockDescription struct {
	mock               *CliCommandMock
	defaultExpectation *CliCommandMockDescriptionExpectation
	expectations       []*CliCommandMockDescriptionExpectation
}

// CliCommandMockDescriptionExpectation specifies expectation struct of the CliCommand.Description
type CliCommandMockDescriptionExpectation struct {
	mock *CliCommandMock

	results *CliCommandMockDescriptionResults
	Counter uint64
}

// CliCommandMockDescriptionResults contains results of the CliCommand.Description
type CliCommandMockDescriptionResults struct {
	s1 string
}

// Expect sets up expected params for CliCommand.Description
func (mmDescription *mCliCommandMockDescription) Expect() *mCliCommandMockDescription {
	if mmDescription.mock.funcDescription != nil {
		mmDescription.mock.t.Fatalf("CliCommandMock.Description mock is already set by Set")
	}

	if mmDescription.defaultExpectation == nil {
		mmDescription.defaultExpectation = &CliCommandMockDescriptionExpectation{}
	}

	return mmDescription
}

// Inspect accepts an inspector function that has same arguments as the CliCommand.Description
func (mmDescription *mCliCommandMockDescription) Inspect(f func()) *mCliCommandMockDescription {
	if mmDescription.mock.inspectFuncDescription != nil {
		mmDescription.mock.t.Fatalf("Inspect function is already set for CliCommandMock.Description")
	}

	mmDescription.mock.inspectFuncDescription = f

	return mmDescription
}

// Return sets up results that will be returned by CliCommand.Description
func (mmDescription *mCliCommandMockDescription) Return(s1 string) *CliCommandMock {
	if mmDescription.mock.funcDescription != nil {
		mmDescription.mock.t.Fatalf("CliCommandMock.Description mock is already set by Set")
	}

	if mmDescription.defaultExpectation == nil {
		mmDescription.defaultExpectation = &CliCommandMockDescriptionExpectation{mock: mmDescription.mock}
	}
	mmDescription.defaultExpectation.results = &CliCommandMockDescriptionResults{s1}
	return mmDescription.mock
}

//Set uses given function f to mock the CliCommand.Description method
func (mmDescription *mCliCommandMockDescription) Set(f func() (s1 string)) *CliCommandMock {
	if mmDescription.defaultExpectation != nil {
		mmDescription.mock.t.Fatalf("Default expectation is already set for the CliCommand.Description method")
	}

	if len(mmDescription.expectations) > 0 {
		mmDescription.mock.t.Fatalf("Some expectations are already set for the CliCommand.Description method")
	}

	mmDescription.mock.funcDescription = f
	return mmDescription.mock
}

// Description implements internal.CliCommand
func (mmDescription *CliCommandMock) Description() (s1 string) {
	mm_atomic.AddUint64(&mmDescription.beforeDescriptionCounter, 1)
	defer mm_atomic.AddUint64(&mmDescription.afterDescriptionCounter, 1)

	if mmDescription.inspectFuncDescription != nil {
		mmDescription.inspectFuncDescription()
	}

	if mmDescription.DescriptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDescription.DescriptionMock.defaultExpectation.Counter, 1)

		mm_results := mmDescription.DescriptionMock.defaultExpectation.results
		if mm_results == nil {
			mmDescription.t.Fatal("No results are set for the CliCommandMock.Description")
		}
		return (*mm_results).s1
	}
	if mmDescription.funcDescription != nil {
		return mmDescription.funcDescription()
	}
	mmDescription.t.Fatalf("Unexpected call to CliCommandMock.Description.")
	return
}

// DescriptionAfterCounter returns a count of finished CliCommandMock.Description invocations
func (mmDescription *CliCommandMock) DescriptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDescription.afterDescriptionCounter)
}

// DescriptionBeforeCounter returns a count of CliCommandMock.Description invocations
func (mmDescription *CliCommandMock) DescriptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDescription.beforeDescriptionCounter)
}

// MinimockDescriptionDone returns true if the count of the Description invocations corresponds
// the number of defined expectations
func (m *CliCommandMock) MinimockDescriptionDone() bool {
	for _, e := range m.DescriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DescriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDescriptionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDescription != nil && mm_atomic.LoadUint64(&m.afterDescriptionCounter) < 1 {
		return false
	}
	return true
}

// MinimockDescriptionInspect logs each unmet expectation
func (m *CliCommandMock) MinimockDescriptionInspect() {
	for _, e := range m.DescriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CliCommandMock.Description")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DescriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDescriptionCounter) < 1 {
		m.t.Error("Expected call to CliCommandMock.Description")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDescription != nil && mm_atomic.LoadUint64(&m.afterDescriptionCounter) < 1 {
		m.t.Error("Expected call to CliCommandMock.Description")
	}
}

type mCliCommandMockName struct {
	mock               *CliCommandMock
	defaultExpectation *CliCommandMockNameExpectation
	expectations       []*CliCommandMockNameExpectation
}

// CliCommandMockNameExpectation specifies expectation struct of the CliCommand.Name
type CliCommandMockNameExpectation struct {
	mock *CliCommandMock

	results *CliCommandMockNameResults
	Counter uint64
}

// CliCommandMockNameResults contains results of the CliCommand.Name
type CliCommandMockNameResults struct {
	s1 string
}

// Expect sets up expected params for CliCommand.Name
func (mmName *mCliCommandMockName) Expect() *mCliCommandMockName {
	if mmName.mock.funcName != nil {
		mmName.mock.t.Fatalf("CliCommandMock.Name mock is already set by Set")
	}

	if mmName.defaultExpectation == nil {
		mmName.defaultExpectation = &CliCommandMockNameExpectation{}
	}

	return mmName
}

// Inspect accepts an inspector function that has same arguments as the CliCommand.Name
func (mmName *mCliCommandMockName) Inspect(f func()) *mCliCommandMockName {
	if mmName.mock.inspectFuncName != nil {
		mmName.mock.t.Fatalf("Inspect function is already set for CliCommandMock.Name")
	}

	mmName.mock.inspectFuncName = f

	return mmName
}

// Return sets up results that will be returned by CliCommand.Name
func (mmName *mCliCommandMockName) Return(s1 string) *CliCommandMock {
	if mmName.mock.funcName != nil {
		mmName.mock.t.Fatalf("CliCommandMock.Name mock is already set by Set")
	}

	if mmName.defaultExpectation == nil {
		mmName.defaultExpectation = &CliCommandMockNameExpectation{mock: mmName.mock}
	}
	mmName.defaultExpectation.results = &CliCommandMockNameResults{s1}
	return mmName.mock
}

//Set uses given function f to mock the CliCommand.Name method
func (mmName *mCliCommandMockName) Set(f func() (s1 string)) *CliCommandMock {
	if mmName.defaultExpectation != nil {
		mmName.mock.t.Fatalf("Default expectation is already set for the CliCommand.Name method")
	}

	if len(mmName.expectations) > 0 {
		mmName.mock.t.Fatalf("Some expectations are already set for the CliCommand.Name method")
	}

	mmName.mock.funcName = f
	return mmName.mock
}

// Name implements internal.CliCommand
func (mmName *CliCommandMock) Name() (s1 string) {
	mm_atomic.AddUint64(&mmName.beforeNameCounter, 1)
	defer mm_atomic.AddUint64(&mmName.afterNameCounter, 1)

	if mmName.inspectFuncName != nil {
		mmName.inspectFuncName()
	}

	if mmName.NameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmName.NameMock.defaultExpectation.Counter, 1)

		mm_results := mmName.NameMock.defaultExpectation.results
		if mm_results == nil {
			mmName.t.Fatal("No results are set for the CliCommandMock.Name")
		}
		return (*mm_results).s1
	}
	if mmName.funcName != nil {
		return mmName.funcName()
	}
	mmName.t.Fatalf("Unexpected call to CliCommandMock.Name.")
	return
}

// NameAfterCounter returns a count of finished CliCommandMock.Name invocations
func (mmName *CliCommandMock) NameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmName.afterNameCounter)
}

// NameBeforeCounter returns a count of CliCommandMock.Name invocations
func (mmName *CliCommandMock) NameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmName.beforeNameCounter)
}

// MinimockNameDone returns true if the count of the Name invocations corresponds
// the number of defined expectations
func (m *CliCommandMock) MinimockNameDone() bool {
	for _, e := range m.NameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcName != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		return false
	}
	return true
}

// MinimockNameInspect logs each unmet expectation
func (m *CliCommandMock) MinimockNameInspect() {
	for _, e := range m.NameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CliCommandMock.Name")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		m.t.Error("Expected call to CliCommandMock.Name")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcName != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		m.t.Error("Expected call to CliCommandMock.Name")
	}
}

type mCliCommandMockRun struct {
	mock               *CliCommandMock
	defaultExpectation *CliCommandMockRunExpectation
	expectations       []*CliCommandMockRunExpectation

	callArgs []*CliCommandMockRunParams
	mutex    sync.RWMutex
}

// CliCommandMockRunExpectation specifies expectation struct of the CliCommand.Run
type CliCommandMockRunExpectation struct {
	mock    *CliCommandMock
	params  *CliCommandMockRunParams
	results *CliCommandMockRunResults
	Counter uint64
}

// CliCommandMockRunParams contains parameters of the CliCommand.Run
type CliCommandMockRunParams struct {
	ctx  context.Context
	args []string
}

// CliCommandMockRunResults contains results of the CliCommand.Run
type CliCommandMockRunResults struct {
	err error
}

// Expect sets up expected params for CliCommand.Run
func (mmRun *mCliCommandMockRun) Expect(ctx context.Context, args []string) *mCliCommandMockRun {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("CliCommandMock.Run mock is already set by Set")
	}

	if mmRun.defaultExpectation == nil {
		mmRun.defaultExpectation = &CliCommandMockRunExpectation{}
	}

	mmRun.defaultExpectation.params = &CliCommandMockRunParams{ctx, args}
	for _, e := range mmRun.expectations {
		if minimock.Equal(e.params, mmRun.defaultExpectation.params) {
			mmRun.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRun.defaultExpectation.params)
		}
	}

	return mmRun
}

// Inspect accepts an inspector function that has same arguments as the CliCommand.Run
func (mmRun *mCliCommandMockRun) Inspect(f func(ctx context.Context, args []string)) *mCliCommandMockRun {
	if mmRun.mock.inspectFuncRun != nil {
		mmRun.mock.t.Fatalf("Inspect function is already set for CliCommandMock.Run")
	}

	mmRun.mock.inspectFuncRun = f

	return mmRun
}

// Return sets up results that will be returned by CliCommand.Run
func (mmRun *mCliCommandMockRun) Return(err error) *CliCommandMock {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("CliCommandMock.Run mock is already set by Set")
	}

	if mmRun.defaultExpectation == nil {
		mmRun.defaultExpectation = &CliCommandMockRunExpectation{mock: mmRun.mock}
	}
	mmRun.defaultExpectation.results = &CliCommandMockRunResults{err}
	return mmRun.mock
}

//Set uses given function f to mock the CliCommand.Run method
func (mmRun *mCliCommandMockRun) Set(f func(ctx context.Context, args []string) (err error)) *CliCommandMock {
	if mmRun.defaultExpectation != nil {
		mmRun.mock.t.Fatalf("Default expectation is already set for the CliCommand.Run method")
	}

	if len(mmRun.expectations) > 0 {
		mmRun.mock.t.Fatalf("Some expectations are already set for the CliCommand.Run method")
	}

	mmRun.mock.funcRun = f
	return mmRun.mock
}

// When sets expectation for the CliCommand.Run which will trigger the result defined by the following
// Then helper
func (mmRun *mCliCommandMockRun) When(ctx context.Context, args []string) *CliCommandMockRunExpectation {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("CliCommandMock.Run mock is already set by Set")
	}

	expectation := &CliCommandMockRunExpectation{
		mock:   mmRun.mock,
		params: &CliCommandMockRunParams{ctx, args},
	}
	mmRun.expectations = append(mmRun.expectations, expectation)
	return expectation
}

// Then sets up CliCommand.Run return parameters for the expectation previously defined by the When method
func (e *CliCommandMockRunExpectation) Then(err error) *CliCommandMock {
	e.results = &CliCommandMockRunResults{err}
	return e.mock
}

// Run implements internal.CliCommand
func (mmRun *CliCommandMock) Run(ctx context.Context, args []string) (err error) {
	mm_atomic.AddUint64(&mmRun.beforeRunCounter, 1)
	defer mm_atomic.AddUint64(&mmRun.afterRunCounter, 1)

	if mmRun.inspectFuncRun != nil {
		mmRun.inspectFuncRun(ctx, args)
	}

	mm_params := &CliCommandMockRunParams{ctx, args}

	// Record call args
	mmRun.RunMock.mutex.Lock()
	mmRun.RunMock.callArgs = append(mmRun.RunMock.callArgs, mm_params)
	mmRun.RunMock.mutex.Unlock()

	for _, e := range mmRun.RunMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRun.RunMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRun.RunMock.defaultExpectation.Counter, 1)
		mm_want := mmRun.RunMock.defaultExpectation.params
		mm_got := CliCommandMockRunParams{ctx, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRun.t.Errorf("CliCommandMock.Run got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRun.RunMock.defaultExpectation.results
		if mm_results == nil {
			mmRun.t.Fatal("No results are set for the CliCommandMock.Run")
		}
		return (*mm_results).err
	}
	if mmRun.funcRun != nil {
		return mmRun.funcRun(ctx, args)
	}
	mmRun.t.Fatalf("Unexpected call to CliCommandMock.Run. %v %v", ctx, args)
	return
}

// RunAfterCounter returns a count of finished CliCommandMock.Run invocations
func (mmRun *CliCommandMock) RunAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRun.afterRunCounter)
}

// RunBeforeCounter returns a count of CliCommandMock.Run invocations
func (mmRun *CliCommandMock) RunBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRun.beforeRunCounter)
}

// Calls returns a list of arguments used in each call to CliCommandMock.Run.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRun *mCliCommandMockRun) Calls() []*CliCommandMockRunParams {
	mmRun.mutex.RLock()

	argCopy := make([]*CliCommandMockRunParams, len(mmRun.callArgs))
	copy(argCopy, mmRun.callArgs)

	mmRun.mutex.RUnlock()

	return argCopy
}

// MinimockRunDone returns true if the count of the Run invocations corresponds
// the number of defined expectations
func (m *CliCommandMock) MinimockRunDone() bool {
	for _, e := range m.RunMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRun != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		return false
	}
	return true
}

// MinimockRunInspect logs each unmet expectation
func (m *CliCommandMock) MinimockRunInspect() {
	for _, e := range m.RunMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CliCommandMock.Run with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		if m.RunMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CliCommandMock.Run")
		} else {
			m.t.Errorf("Expected call to CliCommandMock.Run with params: %#v", *m.RunMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRun != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		m.t.Error("Expected call to CliCommandMock.Run")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CliCommandMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDescriptionInspect()

		m.MinimockNameInspect()

		m.MinimockRunInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CliCommandMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CliCommandMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDescriptionDone() &&
		m.MinimockNameDone() &&
		m.MinimockRunDone()
}
