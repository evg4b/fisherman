package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i golang.org/x/text/transform.Transformer -o ./testing/mocks/transformer_mock.go -n TransformerMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TransformerMock implements transform.Transformer
type TransformerMock struct {
	t minimock.Tester

	funcReset          func()
	inspectFuncReset   func()
	afterResetCounter  uint64
	beforeResetCounter uint64
	ResetMock          mTransformerMockReset

	funcTransform          func(dst []byte, src []byte, atEOF bool) (nDst int, nSrc int, err error)
	inspectFuncTransform   func(dst []byte, src []byte, atEOF bool)
	afterTransformCounter  uint64
	beforeTransformCounter uint64
	TransformMock          mTransformerMockTransform
}

// NewTransformerMock returns a mock for transform.Transformer
func NewTransformerMock(t minimock.Tester) *TransformerMock {
	m := &TransformerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ResetMock = mTransformerMockReset{mock: m}

	m.TransformMock = mTransformerMockTransform{mock: m}
	m.TransformMock.callArgs = []*TransformerMockTransformParams{}

	return m
}

type mTransformerMockReset struct {
	mock               *TransformerMock
	defaultExpectation *TransformerMockResetExpectation
	expectations       []*TransformerMockResetExpectation
}

// TransformerMockResetExpectation specifies expectation struct of the Transformer.Reset
type TransformerMockResetExpectation struct {
	mock *TransformerMock

	Counter uint64
}

// Expect sets up expected params for Transformer.Reset
func (mmReset *mTransformerMockReset) Expect() *mTransformerMockReset {
	if mmReset.mock.funcReset != nil {
		mmReset.mock.t.Fatalf("TransformerMock.Reset mock is already set by Set")
	}

	if mmReset.defaultExpectation == nil {
		mmReset.defaultExpectation = &TransformerMockResetExpectation{}
	}

	return mmReset
}

// Inspect accepts an inspector function that has same arguments as the Transformer.Reset
func (mmReset *mTransformerMockReset) Inspect(f func()) *mTransformerMockReset {
	if mmReset.mock.inspectFuncReset != nil {
		mmReset.mock.t.Fatalf("Inspect function is already set for TransformerMock.Reset")
	}

	mmReset.mock.inspectFuncReset = f

	return mmReset
}

// Return sets up results that will be returned by Transformer.Reset
func (mmReset *mTransformerMockReset) Return() *TransformerMock {
	if mmReset.mock.funcReset != nil {
		mmReset.mock.t.Fatalf("TransformerMock.Reset mock is already set by Set")
	}

	if mmReset.defaultExpectation == nil {
		mmReset.defaultExpectation = &TransformerMockResetExpectation{mock: mmReset.mock}
	}

	return mmReset.mock
}

//Set uses given function f to mock the Transformer.Reset method
func (mmReset *mTransformerMockReset) Set(f func()) *TransformerMock {
	if mmReset.defaultExpectation != nil {
		mmReset.mock.t.Fatalf("Default expectation is already set for the Transformer.Reset method")
	}

	if len(mmReset.expectations) > 0 {
		mmReset.mock.t.Fatalf("Some expectations are already set for the Transformer.Reset method")
	}

	mmReset.mock.funcReset = f
	return mmReset.mock
}

// Reset implements transform.Transformer
func (mmReset *TransformerMock) Reset() {
	mm_atomic.AddUint64(&mmReset.beforeResetCounter, 1)
	defer mm_atomic.AddUint64(&mmReset.afterResetCounter, 1)

	if mmReset.inspectFuncReset != nil {
		mmReset.inspectFuncReset()
	}

	if mmReset.ResetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReset.ResetMock.defaultExpectation.Counter, 1)

		return

	}
	if mmReset.funcReset != nil {
		mmReset.funcReset()
		return
	}
	mmReset.t.Fatalf("Unexpected call to TransformerMock.Reset.")

}

// ResetAfterCounter returns a count of finished TransformerMock.Reset invocations
func (mmReset *TransformerMock) ResetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReset.afterResetCounter)
}

// ResetBeforeCounter returns a count of TransformerMock.Reset invocations
func (mmReset *TransformerMock) ResetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReset.beforeResetCounter)
}

// MinimockResetDone returns true if the count of the Reset invocations corresponds
// the number of defined expectations
func (m *TransformerMock) MinimockResetDone() bool {
	for _, e := range m.ResetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReset != nil && mm_atomic.LoadUint64(&m.afterResetCounter) < 1 {
		return false
	}
	return true
}

// MinimockResetInspect logs each unmet expectation
func (m *TransformerMock) MinimockResetInspect() {
	for _, e := range m.ResetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TransformerMock.Reset")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResetCounter) < 1 {
		m.t.Error("Expected call to TransformerMock.Reset")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReset != nil && mm_atomic.LoadUint64(&m.afterResetCounter) < 1 {
		m.t.Error("Expected call to TransformerMock.Reset")
	}
}

type mTransformerMockTransform struct {
	mock               *TransformerMock
	defaultExpectation *TransformerMockTransformExpectation
	expectations       []*TransformerMockTransformExpectation

	callArgs []*TransformerMockTransformParams
	mutex    sync.RWMutex
}

// TransformerMockTransformExpectation specifies expectation struct of the Transformer.Transform
type TransformerMockTransformExpectation struct {
	mock    *TransformerMock
	params  *TransformerMockTransformParams
	results *TransformerMockTransformResults
	Counter uint64
}

// TransformerMockTransformParams contains parameters of the Transformer.Transform
type TransformerMockTransformParams struct {
	dst   []byte
	src   []byte
	atEOF bool
}

// TransformerMockTransformResults contains results of the Transformer.Transform
type TransformerMockTransformResults struct {
	nDst int
	nSrc int
	err  error
}

// Expect sets up expected params for Transformer.Transform
func (mmTransform *mTransformerMockTransform) Expect(dst []byte, src []byte, atEOF bool) *mTransformerMockTransform {
	if mmTransform.mock.funcTransform != nil {
		mmTransform.mock.t.Fatalf("TransformerMock.Transform mock is already set by Set")
	}

	if mmTransform.defaultExpectation == nil {
		mmTransform.defaultExpectation = &TransformerMockTransformExpectation{}
	}

	mmTransform.defaultExpectation.params = &TransformerMockTransformParams{dst, src, atEOF}
	for _, e := range mmTransform.expectations {
		if minimock.Equal(e.params, mmTransform.defaultExpectation.params) {
			mmTransform.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTransform.defaultExpectation.params)
		}
	}

	return mmTransform
}

// Inspect accepts an inspector function that has same arguments as the Transformer.Transform
func (mmTransform *mTransformerMockTransform) Inspect(f func(dst []byte, src []byte, atEOF bool)) *mTransformerMockTransform {
	if mmTransform.mock.inspectFuncTransform != nil {
		mmTransform.mock.t.Fatalf("Inspect function is already set for TransformerMock.Transform")
	}

	mmTransform.mock.inspectFuncTransform = f

	return mmTransform
}

// Return sets up results that will be returned by Transformer.Transform
func (mmTransform *mTransformerMockTransform) Return(nDst int, nSrc int, err error) *TransformerMock {
	if mmTransform.mock.funcTransform != nil {
		mmTransform.mock.t.Fatalf("TransformerMock.Transform mock is already set by Set")
	}

	if mmTransform.defaultExpectation == nil {
		mmTransform.defaultExpectation = &TransformerMockTransformExpectation{mock: mmTransform.mock}
	}
	mmTransform.defaultExpectation.results = &TransformerMockTransformResults{nDst, nSrc, err}
	return mmTransform.mock
}

//Set uses given function f to mock the Transformer.Transform method
func (mmTransform *mTransformerMockTransform) Set(f func(dst []byte, src []byte, atEOF bool) (nDst int, nSrc int, err error)) *TransformerMock {
	if mmTransform.defaultExpectation != nil {
		mmTransform.mock.t.Fatalf("Default expectation is already set for the Transformer.Transform method")
	}

	if len(mmTransform.expectations) > 0 {
		mmTransform.mock.t.Fatalf("Some expectations are already set for the Transformer.Transform method")
	}

	mmTransform.mock.funcTransform = f
	return mmTransform.mock
}

// When sets expectation for the Transformer.Transform which will trigger the result defined by the following
// Then helper
func (mmTransform *mTransformerMockTransform) When(dst []byte, src []byte, atEOF bool) *TransformerMockTransformExpectation {
	if mmTransform.mock.funcTransform != nil {
		mmTransform.mock.t.Fatalf("TransformerMock.Transform mock is already set by Set")
	}

	expectation := &TransformerMockTransformExpectation{
		mock:   mmTransform.mock,
		params: &TransformerMockTransformParams{dst, src, atEOF},
	}
	mmTransform.expectations = append(mmTransform.expectations, expectation)
	return expectation
}

// Then sets up Transformer.Transform return parameters for the expectation previously defined by the When method
func (e *TransformerMockTransformExpectation) Then(nDst int, nSrc int, err error) *TransformerMock {
	e.results = &TransformerMockTransformResults{nDst, nSrc, err}
	return e.mock
}

// Transform implements transform.Transformer
func (mmTransform *TransformerMock) Transform(dst []byte, src []byte, atEOF bool) (nDst int, nSrc int, err error) {
	mm_atomic.AddUint64(&mmTransform.beforeTransformCounter, 1)
	defer mm_atomic.AddUint64(&mmTransform.afterTransformCounter, 1)

	if mmTransform.inspectFuncTransform != nil {
		mmTransform.inspectFuncTransform(dst, src, atEOF)
	}

	mm_params := &TransformerMockTransformParams{dst, src, atEOF}

	// Record call args
	mmTransform.TransformMock.mutex.Lock()
	mmTransform.TransformMock.callArgs = append(mmTransform.TransformMock.callArgs, mm_params)
	mmTransform.TransformMock.mutex.Unlock()

	for _, e := range mmTransform.TransformMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.nDst, e.results.nSrc, e.results.err
		}
	}

	if mmTransform.TransformMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTransform.TransformMock.defaultExpectation.Counter, 1)
		mm_want := mmTransform.TransformMock.defaultExpectation.params
		mm_got := TransformerMockTransformParams{dst, src, atEOF}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTransform.t.Errorf("TransformerMock.Transform got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTransform.TransformMock.defaultExpectation.results
		if mm_results == nil {
			mmTransform.t.Fatal("No results are set for the TransformerMock.Transform")
		}
		return (*mm_results).nDst, (*mm_results).nSrc, (*mm_results).err
	}
	if mmTransform.funcTransform != nil {
		return mmTransform.funcTransform(dst, src, atEOF)
	}
	mmTransform.t.Fatalf("Unexpected call to TransformerMock.Transform. %v %v %v", dst, src, atEOF)
	return
}

// TransformAfterCounter returns a count of finished TransformerMock.Transform invocations
func (mmTransform *TransformerMock) TransformAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTransform.afterTransformCounter)
}

// TransformBeforeCounter returns a count of TransformerMock.Transform invocations
func (mmTransform *TransformerMock) TransformBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTransform.beforeTransformCounter)
}

// Calls returns a list of arguments used in each call to TransformerMock.Transform.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTransform *mTransformerMockTransform) Calls() []*TransformerMockTransformParams {
	mmTransform.mutex.RLock()

	argCopy := make([]*TransformerMockTransformParams, len(mmTransform.callArgs))
	copy(argCopy, mmTransform.callArgs)

	mmTransform.mutex.RUnlock()

	return argCopy
}

// MinimockTransformDone returns true if the count of the Transform invocations corresponds
// the number of defined expectations
func (m *TransformerMock) MinimockTransformDone() bool {
	for _, e := range m.TransformMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TransformMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTransformCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTransform != nil && mm_atomic.LoadUint64(&m.afterTransformCounter) < 1 {
		return false
	}
	return true
}

// MinimockTransformInspect logs each unmet expectation
func (m *TransformerMock) MinimockTransformInspect() {
	for _, e := range m.TransformMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransformerMock.Transform with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TransformMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTransformCounter) < 1 {
		if m.TransformMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransformerMock.Transform")
		} else {
			m.t.Errorf("Expected call to TransformerMock.Transform with params: %#v", *m.TransformMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTransform != nil && mm_atomic.LoadUint64(&m.afterTransformCounter) < 1 {
		m.t.Error("Expected call to TransformerMock.Transform")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransformerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockResetInspect()

		m.MinimockTransformInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransformerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransformerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockResetDone() &&
		m.MinimockTransformDone()
}
